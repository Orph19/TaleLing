/**
 * @file Centralized TypeScript type definitions for the application.
 * @description Defining shared types here ensures consistency and reduces code duplication.
 */

// =================================================================
//  CONFIGURATION TYPES
// =================================================================

/**
 * Configuration object for connecting to and interacting with Firestore services.
 */
export type FirebaseConfig = {
  projectId: string;
  collectionId: string;
  firebaseApiKey: string;
};

// =================================================================
//  CHAT & AI MODEL TYPES
// =================================================================

/**
 * Represents a single message in a chat conversation with the AI model.
 */
export type ChatMessage = {
  role: 'user' | 'model';
  parts: [{ text: string }];
};


/**
 * The GUARANTEED, sanitized structure for the initial story that our service returns.
 */
export type SanitizedInitialStoryPayload = {
  title: string;
  story: string;
  description: string;
};

/**
 * The expected JSON structure for the initial story segment generated by the AI.
 */
export type InitialStoryPayload = {
  title: string;
  story: string;
};

/**
 * The GUARANTEED, sanitized structure for translations that our service returns.
 */
export type TranslationContent = {
  meanings: string[];
  translation: string;
  examples: string[];
};

export type Image = {
  // The document ID from Firestore, added after fetching. Not part of the stored fields.
  id?: string; 
  
  // Fields stored directly in the Firestore document.
  uid: string; // Firebase Auth UID of the story's poster owner.

  status: string;
  type:string;
  subType: string; // 'cover' | 'in-story'
  createdAt: string; // ISO 8601 date string
  updatedAt?: string; // ISO 8601 date string
  completedAt?: string;

  refunded:boolean;

  
  content: string; //URL of the image
  
  storyId: string; //Id of the story the image belongs to
  style: string; // Style of the image
}

export type Translation = {
  // The document ID from Firestore, added after fetching. Not part of the stored fields.
  id?: string; 
  
  // Fields stored directly in the Firestore document.
  uid: string; // Firebase Auth UID of the story's owner.

  status: string;
  type:string;

  createdAt: string; // ISO 8601 date string
  updatedAt?: string; // ISO 8601 date string
  completedAt?: string;

  refunded:boolean;

  
  content: TranslationContent;
  
  word: string;
  sourceLang:string;
  targetLang:string
}


// =================================================================
//  FIRESTORE DOCUMENT TYPES
// =================================================================

/**
 * Represents the 'details' object nested within a Story document.
 * Contains metadata and generated content about the story.
 */
export type StoryDetails = {
  title: string;
};
/**
 * Represents the 'userSelections' object nested within a Story document.
 * Contains the user selected genre, subgenre and tone of the story.
 */
export type UserSelections = {
  genre: string;
  subGenre: string;
  tone: string;
};
/**
 * Represents the complete structure of a story document as stored in Firestore.
 */
export type Story = {
  // The document ID from Firestore, added after fetching. Not part of the stored fields.
  id?: string; 
  
  // Fields stored directly in the Firestore document.
  uid: string; // Firebase Auth UID of the story's owner.

  status: string;
  type:string;

  createdAt: string; // ISO 8601 date string
  updatedAt?: string; // ISO 8601 date string
  completedAt?: string;

  refunded:boolean;

  
  content: SanitizedInitialStoryPayload;
  selections: UserSelections; // User-selected genre, subgenre, and tone
};

/**
 * Represents the payload used for PATCH requests to update a story.
 * It's a flexible object that can contain any top-level field of a Story.
 */
export type StoryUpdatePayload = Partial<Story>;

/**
 * A custom error class to specifically represent when a user is over their limit.
 * This allows our controllers to catch this specific error and return a 429 status code.
 */
export class LimitExceededError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'LimitExceededError';
  }
}
/**
 * Object that represents the fileds in the 'credits' field
 * of a user document
 */
export type creditsBucket = {
  context: number,
  definition: number,
  image:number,
  story:number
}

/**
 * Object that contains user preferences
 */
export type UserPreferences = {
  sourceLang: string,
  targetLang: string
}

/**
 * Represents the structure of a user document in Firestore.
 */
export type UserDocument = {
  email: string;
  plan: string; 

  preferences: UserPreferences;

  createdAt: string;
  updatedAt: string;

  credits: creditsBucket;
  lastResetDate: string;
  usage: creditsBucket; //Field for leaderboards
};

/**
 * Represents the structure that contains env vars to comunicate
 * with the node express backend
 */
export type EnvironmentVariablesAdmin = {
  apiUrl: string;
  internalSecret: string;
};

/**
 * Schema of the 'firebaseUser' that the firebaseAuthMiddleware returns
 */
export type FirebaseUser = {
  uid: string;
  email: string;
}